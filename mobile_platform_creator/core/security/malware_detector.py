"""
恶意代码检测模块
===========

提供应用程序的恶意代码检测功能，包括静态分析和动态分析。

主要功能：
1. 静态代码分析
2. 动态行为分析
3. 特征码匹配
4. 启发式检测
"""

import os
import re
import json
import logging
import hashlib
import magic
import yara
from typing import Dict, List, Any, Optional, Tuple

logger = logging.getLogger("mobile_platform_creator.core.security.malware_detector")

class MalwareDetector:
    """恶意代码检测器"""
    
    def __init__(self, rules_dir: Optional[str] = None):
        """
        初始化恶意代码检测器
        
        Args:
            rules_dir: YARA规则目录，默认为None（使用内置规则）
        """
        self.rules_dir = rules_dir or os.path.join(
            os.path.dirname(__file__), "rules"
        )
        self.rules = self._load_rules()
        
        # 可疑行为特征
        self.suspicious_behaviors = {
            "file_operations": [
                r"os\.remove",
                r"os\.unlink",
                r"shutil\.rmtree",
                r"os\.system",
                r"subprocess\.call",
            ],
            "network_operations": [
                r"urllib\.request",
                r"requests\.get",
                r"requests\.post",
                r"socket\.connect",
            ],
            "system_operations": [
                r"os\.popen",
                r"subprocess\.Popen",
                r"os\.exec",
                r"os\.spawn",
            ],
        }
    
    def _load_rules(self) -> Dict[str, Any]:
        """
        加载YARA规则
        
        Returns:
            Dict[str, Any]: 规则字典
        """
        rules = {}
        try:
            for rule_file in os.listdir(self.rules_dir):
                if rule_file.endswith(".yar"):
                    rule_path = os.path.join(self.rules_dir, rule_file)
                    rules[rule_file] = yara.compile(rule_path)
            logger.info(f"已加载 {len(rules)} 个YARA规则")
        except Exception as e:
            logger.error(f"加载YARA规则失败: {e}")
        return rules
    
    def scan_file(self, file_path: str) -> Dict[str, Any]:
        """
        扫描单个文件
        
        Args:
            file_path: 文件路径
            
        Returns:
            Dict[str, Any]: 扫描结果
        """
        result = {
            "file_path": file_path,
            "is_malicious": False,
            "threats": [],
            "suspicious_behaviors": [],
            "file_info": {},
        }
        
        try:
            # 获取文件信息
            file_info = self._get_file_info(file_path)
            result["file_info"] = file_info
            
            # YARA规则匹配
            matches = self._match_yara_rules(file_path)
            if matches:
                result["is_malicious"] = True
                result["threats"].extend(matches)
            
            # 静态代码分析
            if file_path.endswith((".py", ".js", ".html")):
                suspicious = self._static_analysis(file_path)
                if suspicious:
                    result["suspicious_behaviors"].extend(suspicious)
            
            # 文件类型检查
            if not self._check_file_type(file_path):
                result["is_malicious"] = True
                result["threats"].append("可疑的文件类型")
            
        except Exception as e:
            logger.error(f"扫描文件失败: {e}")
            result["error"] = str(e)
        
        return result
    
    def _get_file_info(self, file_path: str) -> Dict[str, Any]:
        """
        获取文件信息
        
        Args:
            file_path: 文件路径
            
        Returns:
            Dict[str, Any]: 文件信息
        """
        info = {}
        try:
            # 文件大小
            info["size"] = os.path.getsize(file_path)
            
            # 文件类型
            info["mime_type"] = magic.from_file(file_path, mime=True)
            
            # 文件哈希
            with open(file_path, "rb") as f:
                content = f.read()
                info["md5"] = hashlib.md5(content).hexdigest()
                info["sha256"] = hashlib.sha256(content).hexdigest()
            
            # 文件权限
            info["permissions"] = oct(os.stat(file_path).st_mode)[-3:]
            
        except Exception as e:
            logger.error(f"获取文件信息失败: {e}")
        
        return info
    
    def _match_yara_rules(self, file_path: str) -> List[str]:
        """
        匹配YARA规则
        
        Args:
            file_path: 文件路径
            
        Returns:
            List[str]: 匹配的规则列表
        """
        matches = []
        try:
            for rule_name, rule in self.rules.items():
                if rule.match(file_path):
                    matches.append(rule_name)
        except Exception as e:
            logger.error(f"YARA规则匹配失败: {e}")
        return matches
    
    def _static_analysis(self, file_path: str) -> List[str]:
        """
        静态代码分析
        
        Args:
            file_path: 文件路径
            
        Returns:
            List[str]: 可疑行为列表
        """
        suspicious = []
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            
            # 检查可疑行为
            for category, patterns in self.suspicious_behaviors.items():
                for pattern in patterns:
                    if re.search(pattern, content):
                        suspicious.append(f"{category}: {pattern}")
            
        except Exception as e:
            logger.error(f"静态代码分析失败: {e}")
        
        return suspicious
    
    def _check_file_type(self, file_path: str) -> bool:
        """
        检查文件类型是否合法
        
        Args:
            file_path: 文件路径
            
        Returns:
            bool: 文件类型是否合法
        """
        try:
            mime_type = magic.from_file(file_path, mime=True)
            
            # 允许的文件类型
            allowed_types = {
                "text/": True,
                "application/json": True,
                "application/javascript": True,
                "application/x-python": True,
                "image/": True,
                "audio/": True,
                "video/": True,
            }
            
            # 检查文件类型
            for prefix, allowed in allowed_types.items():
                if mime_type.startswith(prefix):
                    return allowed
            
            return False
            
        except Exception as e:
            logger.error(f"检查文件类型失败: {e}")
            return False
    
    def scan_directory(self, directory: str) -> Dict[str, Any]:
        """
        扫描目录
        
        Args:
            directory: 目录路径
            
        Returns:
            Dict[str, Any]: 扫描结果
        """
        result = {
            "directory": directory,
            "total_files": 0,
            "malicious_files": 0,
            "scan_results": [],
        }
        
        try:
            for root, _, files in os.walk(directory):
                for file in files:
                    file_path = os.path.join(root, file)
                    scan_result = self.scan_file(file_path)
                    
                    result["total_files"] += 1
                    if scan_result["is_malicious"]:
                        result["malicious_files"] += 1
                    
                    result["scan_results"].append(scan_result)
            
        except Exception as e:
            logger.error(f"扫描目录失败: {e}")
            result["error"] = str(e)
        
        return result 